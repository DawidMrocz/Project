// <auto-generated />
using System;
using Aplikacja.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aplikacja.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230112132339_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Aplikacja.Entities.CatModels.Cat", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatId"));

                    b.Property<string>("CatCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CatId");

                    b.HasIndex("UserId");

                    b.ToTable("Cats");
                });

            modelBuilder.Entity("Aplikacja.Entities.CatModels.CatRecord", b =>
                {
                    b.Property<int>("CatRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatRecordId"));

                    b.Property<int>("CatId")
                        .HasColumnType("int");

                    b.Property<int>("InboxItemId")
                        .HasColumnType("int");

                    b.Property<string>("Receiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SapText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatRecordId");

                    b.HasIndex("CatId");

                    b.HasIndex("InboxItemId");

                    b.ToTable("CatRecords");
                });

            modelBuilder.Entity("Aplikacja.Entities.CatModels.CatRecordHours", b =>
                {
                    b.Property<int>("CatRecordHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatRecordHoursId"));

                    b.Property<int>("CatRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.HasKey("CatRecordHoursId");

                    b.HasIndex("CatRecordId");

                    b.ToTable("CatRecordHourss");
                });

            modelBuilder.Entity("Aplikacja.Entities.InboxModel.Inbox", b =>
                {
                    b.Property<int>("InboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InboxId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InboxId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Inboxs");
                });

            modelBuilder.Entity("Aplikacja.Entities.InboxModel.InboxItem", b =>
                {
                    b.Property<int>("InboxItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InboxItemId"));

                    b.Property<int>("Components")
                        .HasColumnType("int");

                    b.Property<int>("DrawingsAssembly")
                        .HasColumnType("int");

                    b.Property<int>("DrawingsComponents")
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int?>("InboxId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("WhenComplete")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InboxItemId");

                    b.HasIndex("InboxId");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("InboxItems");
                });

            modelBuilder.Entity("Aplikacja.Entities.JobModel.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"));

                    b.Property<string>("Client")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DueDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ecm")
                        .HasColumnType("int");

                    b.Property<string>("Engineer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Finished")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gpdm")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Received")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Started")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhenComplete")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            Client = "TOYOTA",
                            Ecm = 4561976,
                            Engineer = "Agata",
                            Gpdm = 1,
                            JobDescription = "Create Muffler",
                            Link = "linkt o task",
                            ProjectName = "sap text",
                            ProjectNumber = "LASDl",
                            Received = "15.22.2022",
                            Status = "2D",
                            System = "Catia",
                            Type = "2D"
                        },
                        new
                        {
                            JobId = 2,
                            Client = "TOYOTA",
                            DueDate = "25.11.2022",
                            Ecm = 4561976,
                            Engineer = "Agata",
                            Gpdm = 1,
                            JobDescription = "Create drawing",
                            Link = "linkt o task",
                            ProjectName = "sap text",
                            ProjectNumber = "LASDl",
                            Received = "20.11.2022",
                            Status = "2D",
                            System = "Catia",
                            Type = "3D"
                        },
                        new
                        {
                            JobId = 3,
                            Client = "TOYOTA",
                            Ecm = 4561976,
                            Engineer = "Agata",
                            Gpdm = 1,
                            JobDescription = "Update hangers",
                            Link = "linkt o task",
                            ProjectName = "sap text",
                            ProjectNumber = "LASDl",
                            Received = "20.11.2022",
                            Status = "2D",
                            System = "Catia",
                            Type = "2D"
                        });
                });

            modelBuilder.Entity("Aplikacja.Entities.RaportModels.Raport", b =>
                {
                    b.Property<int>("RaportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaportId"));

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.HasKey("RaportId");

                    b.ToTable("Raports");
                });

            modelBuilder.Entity("Aplikacja.Entities.RaportModels.UserRaport", b =>
                {
                    b.Property<int>("UserRaportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRaportId"));

                    b.Property<int>("RaportId")
                        .HasColumnType("int");

                    b.Property<double>("UserAllHours")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRaportId");

                    b.HasIndex("RaportId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRaports");
                });

            modelBuilder.Entity("Aplikacja.Entities.RaportModels.UserRaportRecord", b =>
                {
                    b.Property<int>("UserRaportRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRaportRecordId"));

                    b.Property<int>("InboxItemId")
                        .HasColumnType("int");

                    b.Property<double>("TaskHours")
                        .HasColumnType("float");

                    b.Property<int>("UserRaportId")
                        .HasColumnType("int");

                    b.HasKey("UserRaportRecordId");

                    b.HasIndex("InboxItemId");

                    b.HasIndex("UserRaportId");

                    b.ToTable("UserRaportRecords");
                });

            modelBuilder.Entity("Aplikacja.Entities.UserModel.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ActTyp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCtr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ActTyp = "L8531",
                            CCtr = "RS8531",
                            Email = "dawid@tlen.pl",
                            Name = "Dawid",
                            PasswordHash = "zxcasdqwe",
                            Photo = "zdjecie",
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            ActTyp = "L8531",
                            CCtr = "RS8531",
                            Email = "agata@tlen.pl",
                            Name = "Agata",
                            PasswordHash = "zxcasdqwe",
                            Photo = "zdjecie",
                            Role = "Manager"
                        });
                });

            modelBuilder.Entity("Aplikacja.Entities.CatModels.Cat", b =>
                {
                    b.HasOne("Aplikacja.Entities.UserModel.User", "User")
                        .WithMany("Cats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aplikacja.Entities.CatModels.CatRecord", b =>
                {
                    b.HasOne("Aplikacja.Entities.CatModels.Cat", "Cat")
                        .WithMany("CatRecords")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aplikacja.Entities.InboxModel.InboxItem", "InboxItem")
                        .WithMany()
                        .HasForeignKey("InboxItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cat");

                    b.Navigation("InboxItem");
                });

            modelBuilder.Entity("Aplikacja.Entities.CatModels.CatRecordHours", b =>
                {
                    b.HasOne("Aplikacja.Entities.CatModels.CatRecord", "CatRecord")
                        .WithMany("CatRecordHours")
                        .HasForeignKey("CatRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatRecord");
                });

            modelBuilder.Entity("Aplikacja.Entities.InboxModel.Inbox", b =>
                {
                    b.HasOne("Aplikacja.Entities.UserModel.User", "User")
                        .WithOne("Inbox")
                        .HasForeignKey("Aplikacja.Entities.InboxModel.Inbox", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aplikacja.Entities.InboxModel.InboxItem", b =>
                {
                    b.HasOne("Aplikacja.Entities.InboxModel.Inbox", "Inbox")
                        .WithMany("InboxItems")
                        .HasForeignKey("InboxId");

                    b.HasOne("Aplikacja.Entities.JobModel.Job", "Job")
                        .WithOne("InboxItem")
                        .HasForeignKey("Aplikacja.Entities.InboxModel.InboxItem", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inbox");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Aplikacja.Entities.RaportModels.UserRaport", b =>
                {
                    b.HasOne("Aplikacja.Entities.RaportModels.Raport", "Raport")
                        .WithMany("UserRaports")
                        .HasForeignKey("RaportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aplikacja.Entities.UserModel.User", "User")
                        .WithMany("UserRaports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Raport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aplikacja.Entities.RaportModels.UserRaportRecord", b =>
                {
                    b.HasOne("Aplikacja.Entities.InboxModel.InboxItem", "InboxItem")
                        .WithMany()
                        .HasForeignKey("InboxItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aplikacja.Entities.RaportModels.UserRaport", "UserRaport")
                        .WithMany("UserRaportRecords")
                        .HasForeignKey("UserRaportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InboxItem");

                    b.Navigation("UserRaport");
                });

            modelBuilder.Entity("Aplikacja.Entities.CatModels.Cat", b =>
                {
                    b.Navigation("CatRecords");
                });

            modelBuilder.Entity("Aplikacja.Entities.CatModels.CatRecord", b =>
                {
                    b.Navigation("CatRecordHours");
                });

            modelBuilder.Entity("Aplikacja.Entities.InboxModel.Inbox", b =>
                {
                    b.Navigation("InboxItems");
                });

            modelBuilder.Entity("Aplikacja.Entities.JobModel.Job", b =>
                {
                    b.Navigation("InboxItem");
                });

            modelBuilder.Entity("Aplikacja.Entities.RaportModels.Raport", b =>
                {
                    b.Navigation("UserRaports");
                });

            modelBuilder.Entity("Aplikacja.Entities.RaportModels.UserRaport", b =>
                {
                    b.Navigation("UserRaportRecords");
                });

            modelBuilder.Entity("Aplikacja.Entities.UserModel.User", b =>
                {
                    b.Navigation("Cats");

                    b.Navigation("Inbox")
                        .IsRequired();

                    b.Navigation("UserRaports");
                });
#pragma warning restore 612, 618
        }
    }
}
